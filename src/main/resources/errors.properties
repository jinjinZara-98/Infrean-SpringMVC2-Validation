#에러 코드와 메시지를 적어둔 파일, 에러 메시지를 바꾸고 싶다면 여기서만 바꿔주면 에러코드는 그대로 놔둬도 됨
#코드는 제약조건.객체이름.필드이름

#required.item.itemName=상품 이름은 필수입니다.
#range.item.price=가격은 {0} ~ {1} 까지 허용합니다.
#max.item.quantity=수량은 최대 {0} 까지 허용합니다.
#totalPriceMin=가격 * 수량의 합은 {0}원 이상이어야 합니다. 현재 값 = {1}

#==ObjectError==
#Level1
totalPriceMin.item=상품의 가격 * 수량의 합은 {0}원 이상이어야 합니다. 현재 값 = {1}

#Level2 - 생략
totalPriceMin=전체 가격은 {0}원 이상이어야 합니다. 현재 값 = {1}


#==FieldError==
#Level1, 화면마다 달라야할 때
# 에러 이름이 디테일할수록 우선순위가 더 높다
#디테일한 메시지가 없으면 그 다음 순위를 찾음 1, 2, 3, 4
#또는 Level1을 주서거리하면 다음 3으로,
#스프링은 MessageCodesResolver 라는 것으로 이러한 기능을 지원
#range.item.price은 파라미터 2개 받음
required.item.itemName=상품 이름은 필수입니다.
range.item.price=가격은 {0} ~ {1} 까지 허용합니다.
max.item.quantity=수량은 최대 {0} 까지 허용합니다.

#Level2 - 생략

#Level3, 타입별
required.java.lang.String = 필수 문자입니다.
required.java.lang.Integer = 필수 숫자입니다.
min.java.lang.String = {0} 이상의 문자를 입력해주세요.
min.java.lang.Integer = {0} 이상의 숫자를 입력해주세요.
range.java.lang.String = {0} ~ {1} 까지의 문자를 입력해주세요.
range.java.lang.Integer = {0} ~ {1} 까지의 숫자를 입력해주세요.
max.java.lang.String = {0} 까지의 숫자를 허용합니다.
max.java.lang.Integer = {0} 까지의 숫자를 허용합니다.

#Level4
#단순오류 메시지, 범용성이 좋음, 어디서든 쓸 수 잇게
required = 필수 값 입니다.
min= {0} 이상이어야 합니다.
range= {0} ~ {1} 범위를 허용합니다.
max= {0} 까지 허용합니다.

#추가, Level3 Level4, 타입이 안맞을 때 오류메시지
#스프링이 직접 검증 오류에 추가한 경우(주로 타입 정보가 맞지 않음)
#스프링은 타입 오류가 발생하면 typeMismatch 라는 오류 코드를 사용하므로 이 코드에다 메시지 넣어주면됨
#th:erros 에서 메시지 코드들로 메시지를 순서대로 메시지에서 찾고, 노출
typeMismatch.java.lang.Integer=숫자를 입력해주세요.
typeMismatch=타입 오류입니다.

#Bean Validation 추가
#순서
#@NotBlank
#NotBlank.item.itemName
#NotBlank.itemName
#NotBlank.java.lang.String
#NotBlank

#@Range
#Range.item.price
#Range.price
#Range.java.lang.Integer
#Range

#애노테이션마다 기본 메시지들이 정의되어 있지만 개발자가 직접 정의해주는
#BeanValidation 메시지 찾는 순서
#1. 생성된 메시지 코드 순서대로 messageSource(현재 errors.proerties파일) 에서 메시지 찾기
#2. 애노테이션의 message 속성 사용 @NotBlank(message = "공백! {0}")
#3. 라이브러리가 제공하는 기본 값 사용 공백일 수 없습니다

#itemName은 NotBlank를 다르게 메시지를 띄우고싶으면 더 높은 레벨로 정의하는
#이렇게 하면 itemName은 NotBlank는 우선순위가 더 높아 이 메시지를 적용
#NotBlank.item.itemName=상품 이름을 적어주세요.

#{0}은 필드명
#NotBlank={0} 공백X

#위에 둘다 정의해주지 않으면 Item클래스에 정의한 @NotBlank(message = "공백X") 공백이 출력
#이것도 안해놓으면 라이브러리가 제공하는 기본 값 사용

#@NotNull
#@Range(min = 1000, max = 1000000)
#private Integer price;
#@NotNull에러는 정의해주지 않으므로 기본 메시지 노출
#price, 1000 ~ 1000000
Range={0}, {2} ~ {1} 허용

Max={0}, 최대 {1}
